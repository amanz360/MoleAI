import bwapi.*;
import java.util.ArrayList;
import java.util.HashSet;

public class StrategyManager {
	
	public BuildingManager buildingManager;
	public MoleUnit expansionBuilder;
	public HashSet<Unit> buildings;
	public HashSet<MoleUnit> allUnits;
	public ArrayList<Base> bases;
	public ScoutManager scouter;
	
	public StrategyManager()
	{
		expansionBuilder = null;
		buildings = new HashSet<Unit>();
		allUnits = new HashSet<MoleUnit>();
		bases = new ArrayList<Base>();
		buildingManager = new BuildingManager();
		scouter = new ScoutManager();
	}
	
	public void addBuilding(Unit building)
	{
		if(!buildings.contains(building))
		{
			buildings.add(building);
		}
	}
	
	public void addBase(Base b)
	{
		if(!bases.contains(b))
		{
			bases.add(b);
		}
	}
	
	public boolean moleContains(Unit toFind)
	{
		for(MoleUnit unit : allUnits)
		{
			if(unit.myUnit == toFind)
			{
				return true;
			}
		}
		return false;
	}
	
	public void addUnit(MoleUnit newUnit)
	{

		allUnits.add(newUnit);
		//System.out.println("New unit's job: " + newUnit.job.toString());

		
		// Distribute unit into appropriate base
		for(Base b : bases)
		{
			if(newUnit.myUnit.getDistance(b.commandCenter) < 5)
			{
				// If it's a worker, designate either mineral or gas.
				if(newUnit.type == Information.UnitType.WORKER)
				{
					if(!b.isSaturated())
					{
						newUnit.job = Information.Job.MINERALS;
						b.addUnit(newUnit);
						//System.out.println("Worked successfully added to base");
						return;
					}
					else if(!b.gasesSaturated())
					{
						newUnit.job = Information.Job.GAS;
						for(Unit refinery : b.gases)
						{
							int workerCount = b.gasWorkerCount.get(refinery);
							if(refinery.getType() == UnitType.Terran_Refinery && workerCount < 3)
							{
								newUnit.myTarget = new PositionOrUnit(refinery);
								b.gasWorkerCount.put(refinery, workerCount++);
								b.addUnit(newUnit);
								return;
							}
						}
					}
				}
			}
			/*for(Unit building : b.buildingMemory)
			{
				if(newUnit.myUnit.getDistance(building) < 3)
				{
					// Otherwise, it's an army unit and we just add it.
					b.addUnit(newUnit);
					break;
				}
			}*/
			bases.get(0).addUnit(newUnit);
		}
	}
	
	public void update(Game game, Player self)
	{
		if(scouter.noBuildingsKnown() && scouter.scoutWorker == null && this.totalUnitCount(Information.UnitType.WORKER) > 6)
		{
			scouter.changeScout(bases.get(0).popWorker());
		}
		scouter.update(game);
		buildingManager.update(game, self);
		checkForNewExpansions();
		cleanDeadBases();
		cleanDeadUnits();
		runBases(game, self);
		setBuildGoals(self, game);
		researchTech(self);
	}
	
	public void cleanDeadUnits()
	{
		for(MoleUnit unit : allUnits)
		{
			if(!unit.myUnit.exists())
			{
				allUnits.remove(unit);
			}
		}
	}
	
	public void checkForNewExpansions()
	{
		for(Unit building : this.buildings)
		{
			if(building.getType() == UnitType.Terran_Command_Center)
			{
				boolean fresh = true;
				for(Base b : bases)
				{
					if(b.commandCenter.getID() == building.getID())
					{
						fresh = false;
					}
				}
				if(fresh)
				{
					Base newBase = new Base();
					newBase.setCC(building);
					newBase.setBaseInfo();
					bases.add(newBase);
				}
			}
		}
	}
	
	public void runBases(Game game, Player self)
	{
		cleanDeadBases();
		for(Base b : bases)
		{
			b.cleanDeadBuildings();
			b.cleanDeadUnits();
			b.runWorkers(game);
			b.produce(self);
			b.checkForAttack(game);
		}
	}
	
	public void manageForces(Game game)
	{
		boolean shouldAttack = shouldAttackNow();
		for(Base b : bases)
		{
			if(b.state == Information.BaseState.DISTRESSED)
			{
				bases.get(0).offensivePosition = b.getClosestBaseThreat(b.commandCenter).getPosition();
				return;
			}
		}
		if(shouldAttack && bases.get(0).state == Information.BaseState.SAFE)
		{
			
			if(!scouter.noBuildingsKnown())
			{
				bases.get(0).state = Information.BaseState.ATTACKING;
				bases.get(0).offensivePosition = scouter.getClosestEnemyBuilding(bases.get(0).commandCenter.getPosition());
			}
			else if(scouter.lastSeenEnemy != null)
			{
				bases.get(0).state = Information.BaseState.ATTACKING;
				bases.get(0).offensivePosition = scouter.lastSeenEnemy.getPosition();
				if(game.isVisible(scouter.lastSeenEnemy.getTilePosition()) && !scouter.lastSeenEnemy.exists())
				{
					scouter.lastSeenEnemy = null;
					if(scouter.scoutWorker != null)
					{
						scouter.scoutWorker.job = Information.Job.MINERALS;
						bases.get(0).addUnit(scouter.scoutWorker);
						scouter.scoutWorker = null;
					}
				}
			}
			else
			{
				bases.get(0).offensivePosition = b.commandCenter.getPosition();
			} 
		}
		else if(!shouldAttack && b.state == Information.BaseState.ATTACKING && totalUnitCount(Information.UnitType.MARINE) + totalUnitCount(Information.UnitType.MEDIC) + totalUnitCount(Information.UnitType.FIREBAT) <= 15 * bases.size())
		{
			b.state = Information.BaseState.SAFE;
			b.offensivePosition = null;
		}
	}
	
	boolean canBuild(Player self, UnitType buildingType)
	{
		if(self.minerals() >= buildingType.mineralPrice() && self.gas() >= buildingType.gasPrice())
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public void setBuildGoals(Player self, Game game)
	{
		
		for(Base b : bases)
		{
			if(b.getAllUnitsByType(Information.UnitType.WORKER).size() >= 10 && b.productionLevel == Information.ProductionLevel.NONE)
			{
				if(canBuild(self, UnitType.Terran_Barracks))
				{
					buildingManager.addBuildingTask(UnitType.Terran_Barracks, b);
					b.productionLevel = Information.ProductionLevel.LOW;
				}
				
			}
			else if(b.getAllUnitsByType(Information.UnitType.WORKER).size() >= 14 && b.productionLevel == Information.ProductionLevel.LOW)
			{
				if(canBuild(self, UnitType.Terran_Barracks))
				{
					buildingManager.addBuildingTask(UnitType.Terran_Barracks, b);
					b.productionLevel = Information.ProductionLevel.MEDIUM;
				}
			}
			else if(b.getAllUnitsByType(Information.UnitType.WORKER).size() >= 18 && b.productionLevel == Information.ProductionLevel.MEDIUM)
			{
				
				if(totalBuildingCount(UnitType.Terran_Academy) == 0 && !buildingManager.isQueued(UnitType.Terran_Academy) && canBuild(self, UnitType.Terran_Academy))
				{
					buildingManager.addBuildingTask(UnitType.Terran_Academy, b);
				}
				
				if(canBuild(self, UnitType.Terran_Barracks))
				{
					buildingManager.addBuildingTask(UnitType.Terran_Barracks, b);
					b.productionLevel = Information.ProductionLevel.HIGH;
				}
				
			}else if(bases.size() > 1 && b.productionLevel == Information.ProductionLevel.HIGH)
			{
				if(canBuild(self, UnitType.Terran_Barracks))
				{
					buildingManager.addBuildingTask(UnitType.Terran_Barracks, b);
					b.productionLevel = Information.ProductionLevel.MASS;
				}
			}
			else if(b.isSaturated() && b.getBuildingsByType(UnitType.Terran_Refinery).size() < b.gases.size())
			{
				if(canBuild(self, UnitType.Terran_Refinery) && !buildingManager.isQueued(UnitType.Terran_Refinery, b))
				{
					buildingManager.addBuildingTask(UnitType.Terran_Refinery, b.gases.get(0).getTilePosition(), b);
				}
			}
			if( game.self().supplyTotal() < 400 && game.self().supplyTotal() - game.self().supplyUsed() <= 4 + 2*totalBuildingCount(UnitType.Terran_Barracks) && canBuild(self, UnitType.Terran_Supply_Depot))
			{
				//System.out.println("Total barracks: " + totalBuildingCount(UnitType.Terran_Barracks));
				if(!buildingManager.isQueued(UnitType.Terran_Supply_Depot, b))
				{
					buildingManager.addBuildingTask(UnitType.Terran_Supply_Depot, b);
				}
				
			}
		}
		
		if(shouldExpandNow(self, game) && !buildingManager.isQueued(UnitType.Terran_Command_Center))
		{
			TilePosition expansionSpot = MapTools.getNextExpansion(self, game);
			buildingManager.addBuildingTask(UnitType.Terran_Command_Center, expansionSpot, bases.get(bases.size()-1));
						
		}
	}
	
	public void researchTech(Player self)
	{
		if(self.getUpgradeLevel(UpgradeType.U_238_Shells) == 0)
		{
			if(totalBuildingCount(UnitType.Terran_Barracks) >= 3 && totalBuildingCount(UnitType.Terran_Academy) > 0)
			{
				//System.out.println("Reached tech threshold");
				for(Unit building : buildings)
				{
					//System.out.println("Looking for academy");
					if(building.canResearch(TechType.Stim_Packs))
					{
						building.research(TechType.Stim_Packs);
					}
					else if(building.canUpgrade(UpgradeType.U_238_Shells))
					{
						building.upgrade(UpgradeType.U_238_Shells);
					}
					else if(building.canUpgrade(UpgradeType.Caduceus_Reactor))
					{
						building.upgrade(UpgradeType.Caduceus_Reactor);
					}
				}
			}
		}
	}
	
	public int totalUnitCount(Information.UnitType type)
	{
		int count = 0;
		for(Base b : bases)
		{
			count += b.getAllUnitsByType(type).size();
		}
		
		return count;
	}
	
	public int totalBuildingCount(UnitType type)
	{
		int count = 0;
		for(Base b : bases)
		{
			count += b.getBuildingsByType(type).size();
		}
		return count;
	}

	
	private void cleanDeadBases()
	{
		ArrayList<Base> toRemove = new ArrayList<Base>();
		for(Base b : bases)
		{
			if(!b.commandCenter.exists())
			{
				toRemove.add(b);
			}
		}
		bases.remove(toRemove);
	}
	
	public boolean shouldAttackNow()
	{
		if(scouter.noBuildingsKnown())
		{
			return false;
		}else if(totalUnitCount(Information.UnitType.MARINE) + totalUnitCount(Information.UnitType.MEDIC) + totalUnitCount(Information.UnitType.FIREBAT) >= 25 * bases.size())
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public boolean shouldExpandNow(Player player, Game game)
	{
		if(MapTools.getNextExpansion(player, game) == TilePosition.None)
		{
			System.out.println("No valid expansion spot");
			return false;
		}
		
		int frame  = game.getFrameCount();
	    int minute = frame / (24*60);
	    int numDepots = game.self().allUnitCount(UnitType.Terran_Command_Center);
	    
	    //int expansionTimes[] = {5, 10, 20, 30, 40, 50};
	    int expansionTimes[] = {5};
	    for(int i = 0; i < expansionTimes.length; i++)
	    {
	    	if(numDepots < (i+2) && minute > expansionTimes[i])
	    	{
	    		//System.out.println("Should expand!");
	    		return true;
	    	}
	    }
	    
	    return false;
	    
	}
	
	public void drawUnitInfo(Player self, Game game)
	{
		for (MoleUnit myUnit : allUnits) {

	          if(myUnit.myUnit.getType().isBuilding() || !myUnit.myUnit.isCompleted())	continue;
	       
	          game.drawTextMap(myUnit.myUnit.getPosition().getX(), myUnit.myUnit.getPosition().getY(), myUnit.job.toString());
	          if(myUnit.type == Information.UnitType.WORKER)	continue;
	          game.drawLineMap(myUnit.myUnit.getPosition().getX(), myUnit.myUnit.getPosition().getY(), myUnit.myUnit.getOrderTargetPosition().getX(), 
	          		 myUnit.myUnit.getOrderTargetPosition().getY(), bwapi.Color.Green);
	        }
	}

}
